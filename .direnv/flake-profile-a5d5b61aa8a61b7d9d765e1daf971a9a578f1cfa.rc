unset shellHook
PATH=${PATH:-}
nix_saved_PATH="$PATH"
XDG_DATA_DIRS=${XDG_DATA_DIRS:-}
nix_saved_XDG_DATA_DIRS="$XDG_DATA_DIRS"
BASH='/noshell'
HOSTTYPE='x86_64'
IFS=' 	
'
IN_NIX_SHELL='impure'
export IN_NIX_SHELL
LINENO='76'
MACHTYPE='x86_64-pc-linux-gnu'
NIX_BUILD_CORES='0'
export NIX_BUILD_CORES
NIX_STORE='/nix/store'
export NIX_STORE
OLDPWD=''
export OLDPWD
OPTERR='1'
OSTYPE='linux-gnu'
PATH='/path-not-set'
export PATH
PS4='+ '
builder='/nix/store/d0kg8l2iaszkgzap9xf64j94xc23ssfw-bash-interactive-5.2-p21/bin/bash'
export builder
dontAddDisableDepTrack='1'
export dontAddDisableDepTrack
name='devenv-shell-env'
export name
out='/home/sam/Code/forks/jsonresume-nix/outputs/out'
export out
outputs='out'
shellHook='
# Remove all the unnecessary noise that is set by the build env
unset NIX_BUILD_TOP NIX_BUILD_CORES NIX_STORE
unset TEMP TEMPDIR TMP TMPDIR
# $name variable is preserved to keep it compatible with pure shell https://github.com/sindresorhus/pure/blob/47c0c881f0e7cfdb5eaccd335f52ad17b897c060/pure.zsh#L235
unset builder out shellHook stdenv system
# Flakes stuff
unset dontAddDisableDepTrack outputs

# For `nix develop`. We get /noshell on Linux and /sbin/nologin on macOS.
if [[ "$SHELL" == "/noshell" || "$SHELL" == "/sbin/nologin" ]]; then
  export SHELL=/nix/store/d0kg8l2iaszkgzap9xf64j94xc23ssfw-bash-interactive-5.2-p21/bin/bash
fi

# https://github.com/numtide/devshell/issues/158
PATH=${PATH#/path-not-set:}

export DEVENV_PROFILE=/nix/store/l4bgmxl1gaq849brxl4mki2y0cr8nhaz-devenv-profile

# add installed packages to PATH
export PATH="$DEVENV_PROFILE/bin:$PATH"

# prepend common compilation lookup paths
export PKG_CONFIG_PATH="$DEVENV_PROFILE/lib/pkgconfig:${PKG_CONFIG_PATH-}"
export LD_LIBRARY_PATH="$DEVENV_PROFILE/lib:${LD_LIBRARY_PATH-}"
export LIBRARY_PATH="$DEVENV_PROFILE/lib:${LIBRARY_PATH-}"
export C_INCLUDE_PATH="$DEVENV_PROFILE/include:${C_INCLUDE_PATH-}"

# these provide shell completions / default config options
export XDG_DATA_DIRS="$DEVENV_PROFILE/share:${XDG_DATA_DIRS-}"
export XDG_CONFIG_DIRS="$DEVENV_PROFILE/etc/xdg:${XDG_CONFIG_DIRS-}"

export CAROOT='\''/home/sam/Code/forks/jsonresume-nix/.devenv/state/mkcert'\''
export DEVENV_DOTFILE='\''/home/sam/Code/forks/jsonresume-nix/.devenv'\''
export DEVENV_PROFILE='\''/nix/store/l4bgmxl1gaq849brxl4mki2y0cr8nhaz-devenv-profile'\''
export DEVENV_ROOT='\''/home/sam/Code/forks/jsonresume-nix'\''
export DEVENV_STATE='\''/home/sam/Code/forks/jsonresume-nix/.devenv/state'\''
export GIT_EXTERNAL_DIFF='\''difft'\''
export NODE_EXTRA_CA_CERTS='\''/home/sam/Code/forks/jsonresume-nix/.devenv/state/mkcert/rootCA.pem'\''



# Identify the user'\''s terminal to call the appropiate '\''starship init'\'' command
eval "$(starship init $(echo $0))"



echo "Welcome to resume.nix!"

export PS1="\[\e[0;34m\](devenv)\[\e[0m\] ${PS1-}"

# set path to locales on non-NixOS Linux hosts
if [ -z "${LOCALE_ARCHIVE-}" ]; then
  export LOCALE_ARCHIVE=/nix/store/63b1dm7cyqzs3xiaccipi65z19wn8s5b-glibc-locales-2.38-27/lib/locale/locale-archive
fi


# note what environments are active, but make sure we don'\''t repeat them
if [[ ! "${DIRENV_ACTIVE-}" =~ (^|:)"$PWD"(:|$) ]]; then
  export DIRENV_ACTIVE="$PWD:${DIRENV_ACTIVE-}"
fi

# devenv helper
if [ ! type -p direnv &>/dev/null && -f .envrc ]; then
  echo "You have .envrc but direnv command is not installed."
  echo "Please install direnv: https://direnv.net/docs/installation.html"
fi

mkdir -p .devenv
rm -f .devenv/profile
ln -s /nix/store/l4bgmxl1gaq849brxl4mki2y0cr8nhaz-devenv-profile .devenv/profile

'
export shellHook
stdenv='/nix/store/p5j7cx3066k5h61i82c136wdka6l13ra-naked-stdenv'
export stdenv
system='x86_64-linux'
export system
runHook ()
{
 
    eval "$shellHook";
    unset runHook
}
PATH="$PATH${nix_saved_PATH:+:$nix_saved_PATH}"
XDG_DATA_DIRS="$XDG_DATA_DIRS${nix_saved_XDG_DATA_DIRS:+:$nix_saved_XDG_DATA_DIRS}"
export NIX_BUILD_TOP="$(mktemp -d -t nix-shell.XXXXXX)"
export TMP="$NIX_BUILD_TOP"
export TMPDIR="$NIX_BUILD_TOP"
export TEMP="$NIX_BUILD_TOP"
export TEMPDIR="$NIX_BUILD_TOP"
eval "$shellHook"
